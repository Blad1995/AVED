attributes(A)
rownames(A)
rownames(A) <- c("P", "C", "D")
A
colnames(A) <- c("X", "Y", "Z", "Ž")
A
attributes(A)
diag(A)
diag(1)
diag(1,3,3)
t(diag(1)
t(diag(1))
t(diag(1,3,3))
t(A)
t(A)%*%A
t(A)*A
A*A
solve(A)
solve(A[3,3])
solve(A[-4,])
solve(A[-4])
A[-4]
A[-4,]
A[,-4]
solve(A[,-4])
letters <- a:z
l <- list(a=1,b=1:3,c=)
letters <- "a":"z"
l <- list(a=1,b=1:3,c=)
letters <- c("a":"z")
l <- list(a=1,b=1:3,c=)
?alphabet
??alphabet
?seq
seq(from="a", to="z")
letters
l <- list(a=1,b=1:3,c=letters)
l[2]
l[c(1,3)]
l$2
l$b
is.vector(l$b)
l[[3]]
l$c
l$c[1:7]
library(magritte)
library(magrittr)
install.packages("magrittr")
library(magrittr)
install.packages("tibble")
library(magrittr)
library(tibble)
tibble(ahoj=c(1,2,3,4), ypsil=4:1)
X_1=tibble(ahoj=c(1,2,3,4), ypsil=4:1)
X_1$ahoj
X_1=tibble(ahoj=c(1,1,2,2,3,4,3,4), ypsil=1:8)
X_1
library(dplyr)
install.packages("dplyr")
library(dplyr)
X_1 %>% group_by(ahoj)
X_1 %>% group_by(ahoj) %>% summarise(sum_y = sum(ypsil))
rm(list = ls())
f1 <- factor(c("a", "b", "c"))
f2 <- factor(c("x", "y", "z"))
c(f1, f2)
levels(f1)
levels(f1)[f1]
levels(f1)[c("a","b")]
x <- 1 / 0
if (x == 1) {
print("jedna")
} else if (x > 1) {
print("větší")
} else {
print("menší")
}
x <- 1 / +0
if (x == 1) {
print("jedna")
} else if (x > 1) {
print("větší")
} else {
print("menší")
}
x <- 1 / -0
if (x == 1) {
print("jedna")
} else if (x > 1) {
print("větší")
} else {
print("menší")
}
x <- NA
if (x == 1) {
print("jedna")
} else if (x > 1) {
print("větší")
} else {
print("menší")
}
x <- NA
if (is.na(x)){
print("NA")
}else if (x == 1) {
print("jedna")
} else if (x > 1) {
print("větší")
} else {
print("menší")
}
c(1,0)|c(1,1)
c(1,0)||c(1,1)
c(1,0)&c(1,1)
seq_along(c(1,2))
seq_along(c())
x <- 0
if (is.na(x)){
print("NA")
}else if (x == 1) {
print("jedna")
} else if (x > 1) {
print("větší")
} else {
message("menší")
}
?try
?tryCatch
?summary
y <- c(1,2,3)
summary(y)
y <- 1:100
summary(y)
y <- 0:100
summary(y)
?ecdf
ecdf(1)
ecdf(1:3)
?e
?e1
ecdf(1:3)(2)
ecdf(1:3)(3)
ecdf(1:3)(1)
?<<-
help(<<-)
help(<-)
y<<-2
print(y)
y<<-3
print(y)
y<<-3
x <-c(1,2,4,NA,5)
y <- c(1,NA,1,NA,2,2,2)
aver <- lapply(list(x,y),mean, na.rm = TRUE)
print(aver)
aver_err <- lapply(list(x,y),mean)
print(aver)
print(aver_err)
aver_own <- lapply(list(x,y), function(x) sum(x)/length(x))
print(aver_own)
aver_own <- lapply(list(x,y), function(x) sum(x, rm.na= TRUE)/length(x))
print(aver)
print(aver_err)
print(aver_own)
?sum
aver_own <- lapply(list(x,y), function(x) sum(x, na.rm = TRUE)/length(x))
print(aver)
print(aver_err)
print(aver_own)
install.packages("purrr")
load(purr)
load(purrr)
library("purrr", lib.loc="~/R/win-library/3.4")
library(purrr)
v <- list(1, 2, "a", 5)
map(v, log)
v <- list(1, 2, "a", 5)
res <- map(v, safely(log))
res
res_t <- transpose(res)
res_t
which(map_lgl(res_t, ~is_null(.)))
which(map_lgl(res_t, is_null))
which(map_lgl(res_t[1], is_null))
which(map_lgl(res_t[[1]], is_null))
which(map_lgl(res_t$result, ~is_null(.)))
v <- list(1, 2, "a", 5)
map(v, log)
v <- list(1, 2, "a", 5)
res <- map(v, safely(log))
res_t <- transpose(res)
bad_index <- which(map_lgl(res_t$result, ~is_null(.)))
res_t[[bad_index]]
res_t[bad_index]
res_t$result[bad_index]
res_t$error[bad_index]
v[bad_index]
res_t$error[bad_index]
print("Chyba nastala na prvku s hodnotou: ", v[bad_index])
print(cat("Chyba nastala na prvku s hodnotou: ", v[bad_index])
print(v[bad_index])
res_t$error[bad_index]
print(cat("Chyba nastala na prvku s hodnotou: ", v[bad_index]))
print("Chyba nastala na prvku s hodnotou: ")
print(v[bad_index])
print("Chyba nastala na prvku s hodnotou: ")
print(v[bad_index])
res <- map(v, possibly(log, "Ahoj"))
v <- list(1, 2, "a", 5)
#chyby nahradí "Ahoj"
res <- map(v, possibly(log, "Ahoj"))
print(res)
load(iris)
iris
head(iris)
irises <-  split(iris, iris$Species)
head(irises)
head(irises, n = 2)
apply(irises, head, n = 3)
apply(irises, head)
walk(irises, head)
irises[1]
ceny <- c("plavky 1200Kč", "zelenina 34 Kč", "kapesníky neměli",
"2x rum      379 Kč", "sluneční brýdle 300Kč", "sušenky 37 Kč + 23 Kč",
"tyčinky do uší byly zdarma" )
## procvičování regulární výrazy
library("stringr")
install.packages("stringr")
## procvičování regulární výrazy
library("stringr")
ceny <- c("plavky 1200Kč", "zelenina 34 Kč", "kapesníky neměli",
"2x rum      379 Kč", "sluneční brýdle 300Kč", "sušenky 37 Kč + 23 Kč",
"tyčinky do uší byly zdarma" )
r1 <- str_c("[\d]+ ?[Kk]č")
r1 <- str_c("[\\d]+ ?[Kk]č")
str_view_all(ceny, r1)
r1 <- str_c("[\\d]+ ?[Kk]č")
str_view_all(ceny, r1)
install.packages("htmltools")
str_view_all(ceny, r1)
install.packages("htmlwidgets")
## procvičování regulární výrazy
library("stringr")
ceny <- c("plavky 1200Kč", "zelenina 34 Kč", "kapesníky neměli",
"2x rum      379 Kč", "sluneční brýdle 300Kč", "sušenky 37 Kč + 23 Kč",
"tyčinky do uší byly zdarma" )
r1 <- str_c("[\\d]+ ?[Kk]č")
str_view_all(ceny, r1)
str_subset(ceny, r1)
str_count(ceny, r1)
r1 <- str_c("[\\d]+\\s*[Kk]č")
str_subset(ceny, r1)
str_count(ceny, r1)
r1 <- str_c("[[:digit:]]+\\s*[Kk]č")
str_subset(ceny, r1)
str_count(ceny, r1)
r1 <- str_c("[[:digit:]]+[:space:]*[Kk]č")
str_subset(ceny, r1)
str_count(ceny, r1)
r1 <- str_c("([[:digit:]]+)[:space:]*[Kk]č")
str_subset(ceny, r1)
str_count(ceny, r1)
str_match(ceny, r1)
r1 <- str_c("([([:digit:])]+)[:space:]*[Kk]č")
str_subset(ceny, r1)
str_count(ceny, r1)
str_match(ceny, r1)
r2 <- str_c("([[:digit:]]+)[:space:]*[Kk]č")
str_extract(ceny, r2)
str_match(ceny, r2)
str_match(ceny, r2)[,2]
str_match_all(ceny, r2)
library("magrettr")
install.packages("magrittr")
library("magrettr")
library("magrittr")
str_extract(ceny, r2)
## procvičování regulární výrazy
library("stringr")
ceny <- c("plavky 1200Kč", "zelenina 34 Kč", "kapesníky neměli",
"2x rum      379 Kč", "sluneční brýdle 300Kč", "sušenky 37 Kč + 23 Kč",
"tyčinky do uší byly zdarma" )
r1 <- str_c("[[:digit:]]+[:space:]*[Kk]č")
str_subset(ceny, r1)
str_count(ceny, r1)
r2 <- str_c("([[:digit:]]+)[:space:]*[Kk]č")
library("magrittr")
str_extract(ceny, r2)
#první možnost
str_extract(ceny, r2) %>% str_extract(pattern = "[:digits:]+") %>% as.numeric()
r2 <- str_c("([[:digit:]]+)[:space:]*[Kk]č")
library("magrittr")
str_extract(ceny, r2)
#první možnost
str_extract(ceny, r2) %>% str_extract(pattern = "[:digits:]+") %>% as.numeric()
#první možnost
str_extract(ceny, r2) %>% str_extract("[:digits:]+") %>% as.numeric()
#první možnost
str_extract(ceny, r2) %>% str_extract("\\d+") %>% as.numeric()
#první možnost
str_extract(ceny, r2) %>% str_extract("[:digit:]+") %>% as.numeric()
str_match(ceny, r2)[,2]
str_match(ceny, r2)[,2] %>% as.numeric()
str_extract_all(ceny, r2)
str_extract_all(ceny, r2) %>% function(x) as.numeric(str_extract(x, "\\d+"))
str_extract_all(ceny, r2) %>% (function(x) as.numeric(str_extract(x, "\\d+")))
vignette("develop_intro", package = "htmlwidgets")
#nebo lapply
s <- c("s-chunk.csv", "t-cosi.tsv", "p-xxxl.sav", "t-12.csv")
r1 <- regex("([[:alpha:]]+-{1})[[:alpha:]]*(\\.{1}.*)", multiline = FALSE)
r3 <- regex("([[:alpha:]]+-{1})[[:alpha:]]*(\\.{1}.*)", multiline = FALSE)
str_view_all(s, r3)
r3 <- regex("([[:alphanum:]]+-{1})[[:alpha:]]*(\\.{1}.*)", multiline = FALSE)
str_view_all(s, r3)
?regex
r3 <- regex("([[:alpha:]]+-{1})[[:alnum:]]*(\\.{1}.*)", multiline = FALSE)
str_view_all(s, r3)
str_replace(s, r3, \1c(1:length(s))\2)
str_replace(s, r3, cat("\\1", c(1:length(s)),"\\2")
s <- c("s-chunk.csv", "t-cosi.tsv", "p-xxxl.sav", "t-12.csv")
r3 <- regex("([[:alpha:]]+-{1})[[:alnum:]]*(\\.{1}.*)", multiline = FALSE)
str_view_all(s, r3)
str_replace(s, r3, cat("\\1", c(1:length(s)),"\\2"))
repl <-  apply(seq_along(s), ...)
repl <-  lapply(seq_along(s), ~cat("\\1", ., "\\2"))
repl <-  lapply(seq_along(s), function(x) cat("\\1", x, "\\2"))
cat(repl, sep = "\n")
print(repl)
repl <-  lapply(seq_along(s), function(x) cat("\\1", x, "\\2"))
print(repl)
str_replace(s, r3, )
str_replace(s, r3, repl)
repl <-  lapply(seq_along(s), function(x) c("\\1", x, "\\2"))
str_replace(s, r3, repl)
repl <-  lapply(seq_along(s), function(x) str_join("\\1", x, "\\2"))
View(repl)
str_replace(s, r3, repl)
purrr::map(repl, ~str_replace(s, r3, .)
]
<purrr::map()
?purrr::map()
purrr::map(repl, function(x) str_replace(s, r3, x)
]
purrr::map(repl, function(x) str_replace(s, r3, x))
repl <- str_c("\\1", str_pad(seq_along(s), width = 3, pad = "0"), "\\2")
str_replace(s, r3, repl)
s <- c("s-chunk.csv", "t-cosi.tsv", "p-xxxl.sav", "s-003.sav", "t-12.csv")
r3 <- regex("([[:alpha:]]+-{1})[[:alnum:]]*(\\.{1}.*)", multiline = FALSE)
str_view_all(s, r3)
repl <- str_c("\\1", str_pad(seq_along(s), width = 3, pad = "0"), "\\2")
str_replace(s, r3, repl)
load("stringr")
library(stringr)
library(tibble)
library(readr)
setwd("D:/Ondra Divina/OneDrive/Zapisy/R_scripts/AVED/hw06")
raw_data  <- read_lines("hw06.txt")
head(raw_data)
people  <- read_lines("hw06.txt")
# clear workspace
rm(list = ls())
library(stringr)
library(tibble)
library(readr)
people  <- read_lines("hw06.txt")
save(people, file = "results.RData")
cols <- str_split(people, pattern = "|" n = 3)
cols <- str_split(people, pattern = "|", n = 3)
cols
cols <- str_split_fixed(people, pattern = "|", n = 3)
View(cols)
cols
cols <- str_split_fixed(people, pattern = "|", n = 2)
cols
cols <- str_split_fixed(people, pattern = "|", n = 3)
# clear workspace
rm(list = ls())
library(stringr)
library(tibble)
library(readr)
people  <- read_lines("hw06.txt")
save(people, file = "results.RData")
cols <- str_split_fixed(people, pattern = "|", n = 3)
cols <- str_split(people, pattern = "|", n = 3)
cols <- str_split(people, pattern = "|", simplify = TRUE)
View(cols)
cols <- str_split(people, pattern = " | ", simplify = TRUE)
cols
people  <- read_lines("hw06.txt")
save(people, file = "results.RData")
cols <- str_split(people, pattern = " | ", simplify = TRUE)
cols <- str_split_fixed(people, pattern = "\\|", n = 3)
View(cols)
colnames(cols) <- c("name", "height", "weight")
cols
df1 <- as.tibble(cols)
df1
# clear workspace
rm(list = ls())
library(stringr)
library(tibble)
library(readr)
people  <- read_lines("hw06.txt")
save(people, file = "results.RData")
cols <- str_split_fixed(people, pattern = "\\|", n = 3)
colnames(cols) <- c("name", "height", "weight")
df1 <- as.tibble(cols)
save(people, df1, file = "results.RData")
# 4. clean names in df2
df2 <- df1
df2$name <- str_trim(df1$name)
d2
df2
df2$name <- str_trim(df1$name, side = "both")
df2
str_length(df2$name)
# 4. clean names in df2
df2 <- df1
df2$name <- str_trim(df1$name, side = "both")
save(people, df1, df2, file = "results.RData")
df2$name <- str_replace_all(df1$name,pattern = "\"", replacement = "")
df2
head(df2)
str_length(df2$name)
df2$name <- str_trim(df1$name, side = "both")
str_length(df2$name)
# 4. clean names in df2
df2 <- df1
str_length(df2$name)
df2$name <- str_replace_all(df1$name,pattern = "\"", replacement = "")
str_length(df2$name)
df2$name <- str_trim(df1$name, side = "both")
str_length(df2$name)
save(people, df1, df2, file = "results.RData")
# 5. change height and weight to numeric in df3
df3 <- df2
df3$height <- as.numeric(df3$height)
df3$weight<- as.numeric(df3$weight)
df3$weight <- as.numeric(df3$weight)
# 5. change height and weight to numeric in df3
df3 <- df2
df3$height <- as.numeric(df3$height)
df3$weight <- as.numeric(df3$weight)
df3$height <- str_extract(df3$height, pattern = "[[:digit:]]+")
df3$height
# 5. change height and weight to numeric in df3
df3 <- df2
df3$height <- str_extract(df3$height, pattern = "[[:digit:]]+")
df3$weight <- str_extract(df3$weight, pattern = "[[:digit:]]+")
df3$height <- as.numeric(df3$height)
df3$weight <- as.numeric(df3$weight)
save(people, df1, df2, df3, file = "results.RData")
df3
# clear workspace
rm(list = ls())
library(stringr)
library(tibble)
library(readr)
people  <- read_lines("hw06.txt")
save(people, file = "results.RData")
cols <- str_split_fixed(people, pattern = "\\|", n = 3)
colnames(cols) <- c("name", "height", "weight")
df1 <- as.tibble(cols)
save(people, df1, file = "results.RData")
# 4. clean names in df2
df2 <- df1
df2$name <- str_replace_all(df1$name,pattern = "\"", replacement = "")
df2$name <- str_trim(df1$name, side = "both")
save(people, df1, df2, file = "results.RData")
# 5. change height and weight to numeric in df3
df3 <- df2
df3$height <- str_extract(df3$height, pattern = "[[:digit:]]+")
df3$weight <- str_extract(df3$weight, pattern = "[[:digit:]]+")
df3$height <- as.numeric(df3$height)
df3$weight <- as.numeric(df3$weight)
df3
# 4. clean names in df2
df2 <- df1
df2$name <- str_replace_all(df1$name,pattern = "\"", replacement = "")
df2$name <- str_trim(df1$name, side = "both")
df2
# 4. clean names in df2
df2 <- df1
df2$name <- str_replace_all(df1$name,pattern = "\"", replacement = "")
# 4. clean names in df2
df2 <- df1
df2$name <- str_replace_all(df2$name,pattern = "\"", replacement = "")
df2$name <- str_trim(df2$name, side = "both")
df2
save(people, df1, df2, file = "results.RData")
# 5. change height and weight to numeric in df3
df3 <- df2
df3$height <- str_extract(df3$height, pattern = "[[:digit:]]+")
df3$weight <- str_extract(df3$weight, pattern = "[[:digit:]]+")
df3$height <- as.numeric(df3$height)
df3$weight <- as.numeric(df3$weight)
df3
# 6. add bmi to df4
df4 <- df3
df4$bmi <- df4$weight / (df4$height / 100)^2
# 6. add bmi to df4
df4 <- df3
df4$bmi <- df4$weight / (df4$height / 100)^2
save(people, df1, df2, df3, df4, file = "results.RData")
df4$message <- str_c(df4$name," has BMI ", df4$bmi)
head(df4)
head(df4$message)
df4$bmi <- round(df4$weight / (df4$height / 100)^2, 1)
save(people, df1, df2, df3, df4, file = "results.RData")
df4$message <- str_c(df4$name," has BMI ", df4$bmi)
df4$bmi <- round(df4$weight / (df4$height / 100)^2, 1)
head(df4$message)
