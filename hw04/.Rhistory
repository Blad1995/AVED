x <-5
y<-4
print(x)
print(ls)
print(ls())
print(`ls()``)
)
print(`ls()`)
"ahoj"
x <-5
y<-4
ls()
list=ls()
list
rm(list)
rm(list=ls())
x <- c(a=1,b=2,c=3)
attributes(x)
x
attr(x,"names")
attr(x,"names") <- c("A","B","C")
x
attr(x,"names") <- NULL
x
A <- matrix(1:12, nrow = 3)
B <- matrix(101:112, nrow = 4)
a
A
B
rbind(A,B)
matrix(A,B)
matrix(A, nrow =3)
matrix(A, nrow =5)
matrix(A, nrow =4)
attributes(A)
rownames(A)
rownames(A) <- c("P", "C", "D")
A
colnames(A) <- c("X", "Y", "Z", "Ž")
A
attributes(A)
diag(A)
diag(1)
diag(1,3,3)
t(diag(1)
t(diag(1))
t(diag(1,3,3))
t(A)
t(A)%*%A
t(A)*A
A*A
solve(A)
solve(A[3,3])
solve(A[-4,])
solve(A[-4])
A[-4]
A[-4,]
A[,-4]
solve(A[,-4])
letters <- a:z
l <- list(a=1,b=1:3,c=)
letters <- "a":"z"
l <- list(a=1,b=1:3,c=)
letters <- c("a":"z")
l <- list(a=1,b=1:3,c=)
?alphabet
??alphabet
?seq
seq(from="a", to="z")
letters
l <- list(a=1,b=1:3,c=letters)
l[2]
l[c(1,3)]
l$2
l$b
is.vector(l$b)
l[[3]]
l$c
l$c[1:7]
library(magritte)
library(magrittr)
install.packages("magrittr")
library(magrittr)
install.packages("tibble")
library(magrittr)
library(tibble)
tibble(ahoj=c(1,2,3,4), ypsil=4:1)
X_1=tibble(ahoj=c(1,2,3,4), ypsil=4:1)
X_1$ahoj
X_1=tibble(ahoj=c(1,1,2,2,3,4,3,4), ypsil=1:8)
X_1
library(dplyr)
install.packages("dplyr")
library(dplyr)
X_1 %>% group_by(ahoj)
X_1 %>% group_by(ahoj) %>% summarise(sum_y = sum(ypsil))
rm(list = ls())
f1 <- factor(c("a", "b", "c"))
f2 <- factor(c("x", "y", "z"))
c(f1, f2)
levels(f1)
levels(f1)[f1]
levels(f1)[c("a","b")]
x <- 1 / 0
if (x == 1) {
print("jedna")
} else if (x > 1) {
print("větší")
} else {
print("menší")
}
x <- 1 / +0
if (x == 1) {
print("jedna")
} else if (x > 1) {
print("větší")
} else {
print("menší")
}
x <- 1 / -0
if (x == 1) {
print("jedna")
} else if (x > 1) {
print("větší")
} else {
print("menší")
}
x <- NA
if (x == 1) {
print("jedna")
} else if (x > 1) {
print("větší")
} else {
print("menší")
}
x <- NA
if (is.na(x)){
print("NA")
}else if (x == 1) {
print("jedna")
} else if (x > 1) {
print("větší")
} else {
print("menší")
}
c(1,0)|c(1,1)
c(1,0)||c(1,1)
c(1,0)&c(1,1)
seq_along(c(1,2))
seq_along(c())
x <- 0
if (is.na(x)){
print("NA")
}else if (x == 1) {
print("jedna")
} else if (x > 1) {
print("větší")
} else {
message("menší")
}
?try
?tryCatch
?summary
y <- c(1,2,3)
summary(y)
y <- 1:100
summary(y)
y <- 0:100
summary(y)
?ecdf
ecdf(1)
ecdf(1:3)
?e
?e1
ecdf(1:3)(2)
ecdf(1:3)(3)
ecdf(1:3)(1)
?<<-
help(<<-)
help(<-)
y<<-2
print(y)
y<<-3
print(y)
y<<-3
x <-c(1,2,4,NA,5)
y <- c(1,NA,1,NA,2,2,2)
aver <- lapply(list(x,y),mean, na.rm = TRUE)
print(aver)
aver_err <- lapply(list(x,y),mean)
print(aver)
print(aver_err)
aver_own <- lapply(list(x,y), function(x) sum(x)/length(x))
print(aver_own)
aver_own <- lapply(list(x,y), function(x) sum(x, rm.na= TRUE)/length(x))
print(aver)
print(aver_err)
print(aver_own)
?sum
aver_own <- lapply(list(x,y), function(x) sum(x, na.rm = TRUE)/length(x))
print(aver)
print(aver_err)
print(aver_own)
install.packages("purrr")
load(purr)
load(purrr)
library("purrr", lib.loc="~/R/win-library/3.4")
library(purrr)
v <- list(1, 2, "a", 5)
map(v, log)
v <- list(1, 2, "a", 5)
res <- map(v, safely(log))
res
res_t <- transpose(res)
res_t
which(map_lgl(res_t, ~is_null(.)))
which(map_lgl(res_t, is_null))
which(map_lgl(res_t[1], is_null))
which(map_lgl(res_t[[1]], is_null))
which(map_lgl(res_t$result, ~is_null(.)))
v <- list(1, 2, "a", 5)
map(v, log)
v <- list(1, 2, "a", 5)
res <- map(v, safely(log))
res_t <- transpose(res)
bad_index <- which(map_lgl(res_t$result, ~is_null(.)))
res_t[[bad_index]]
res_t[bad_index]
res_t$result[bad_index]
res_t$error[bad_index]
v[bad_index]
res_t$error[bad_index]
print("Chyba nastala na prvku s hodnotou: ", v[bad_index])
print(cat("Chyba nastala na prvku s hodnotou: ", v[bad_index])
print(v[bad_index])
res_t$error[bad_index]
print(cat("Chyba nastala na prvku s hodnotou: ", v[bad_index]))
print("Chyba nastala na prvku s hodnotou: ")
print(v[bad_index])
print("Chyba nastala na prvku s hodnotou: ")
print(v[bad_index])
res <- map(v, possibly(log, "Ahoj"))
v <- list(1, 2, "a", 5)
#chyby nahradí "Ahoj"
res <- map(v, possibly(log, "Ahoj"))
print(res)
load(iris)
iris
head(iris)
irises <-  split(iris, iris$Species)
head(irises)
head(irises, n = 2)
apply(irises, head, n = 3)
apply(irises, head)
walk(irises, head)
irises[1]
# clear workspace
rm(list = ls())
# load necessary libraries
library(tibble)
# load the data needed
load("hw04.RData")
alpha <- function(pstar, p){
if (!(is.numeric(pstar) && length(pstar) == 1 && pstar > 0
&& is.vector(p) && length(p) > 0 && all(p > 0))) {
# bad arguments handling
stop("Bad inputs")
}
# return desired value
sqrt(sum((p - pstar) ^ 2) / length(p)) / pstar * 100
}
save(alpha, file = "results.RData")
alpha_df <- function(df, id){
data <- df[df$id == id, ]
alpha(data$pstar[1], data$p)
}
save(alpha, alpha_df, file = "results.RData")
# 3. create vector ids --------------------------------------------------
ids = unique(experiment$id)
save(alpha, alpha_df, ids, file = "results.RData")
alphas <- purrr::map_dbl(ids,~alpha_df(experiment, .))
setwd("D:/Ondra Divina/OneDrive/Zapisy/R_scripts/AVED/hw04")
# clear workspace
rm(list = ls())
# load necessary libraries
library(tibble)
# load the data needed
load("hw04.RData")
alpha <- function(pstar, p){
if (!(is.numeric(pstar) && length(pstar) == 1 && pstar > 0
&& is.vector(p) && length(p) > 0 && all(p > 0))) {
# bad arguments handling
stop("Bad inputs")
}
# return desired value
sqrt(sum((p - pstar) ^ 2) / length(p)) / pstar * 100
}
save(alpha, file = "results.RData")
alpha_df <- function(df, id){
data <- df[df$id == id, ]
alpha(data$pstar[1], data$p)
}
save(alpha, alpha_df, file = "results.RData")
# 3. create vector ids --------------------------------------------------
ids = unique(experiment$id)
save(alpha, alpha_df, ids, file = "results.RData")
alphas <- purrr::map_dbl(ids,~alpha_df(experiment, .))
